---
title: "Dashboard"
format:
  dashboard: 
    orientation: columns
---


## Column {width="20%"}

### Row {height="50%"}

```{r, install_packages}
#| echo: false
#| include: false
library(tidyverse)
```

```{r, load_data}
#| echo: false
#| include: false

raw_data <- readRDS("Data/2025-02-28_datastore.rds")


cleaned_data <-
  raw_data %>%
  # Select relevant columns
  select(
    CSNumber,
    ServiceName,
    CareService,
    Subtype,
    MinGrade,
    Last_inspection_Date,
    NumberStaff,
    Registered_Places,
    starts_with("KQ"),
    -ends_with("change"),
    Complaints_upheld_2425,
    Enforcements_issued_2425,
    any_requirements_2425
  ) %>%
  # Remove empty service ID numbers
  filter(CSNumber != "") %>%
  # Pivot grade categories in order to revalue grades as strings
  pivot_longer(cols = starts_with("KQ"),
               names_to = "Key Question",
               values_to = "Grade") %>%
  mutate(
    Grade = case_match(
      Grade,
      NA ~ "No grade yet",
      1 ~ "Unsatisfactory",
      2 ~ "Weak",
      3 ~ "Adequate",
      4 ~ "Good",
      5 ~ "Very good",
      6 ~ "Excellent"
    )
  ) %>%
  pivot_wider(names_from = `Key Question`, values_from = "Grade") %>%
  # Convert encoding to prevent special characters in strings
  mutate_if(is.character, function(col)
    iconv(col, to = "UTF-8"))

datastore <- 
  cleaned_data %>% 
  mutate(
    # Custom name for service combining with ID number
    service = paste0(ServiceName, " - ", CSNumber),
    # Keep numeric mingrade for conditional queries
    MinGrade_numeric = MinGrade,
    # Converting minimum grade to strings too
    MinGrade = case_match(
      MinGrade,
      NA ~ "No grade yet",
      1 ~ "Unsatisfactory",
      2 ~ "Weak",
      3 ~ "Adequate",
      4 ~ "Good",
      5 ~ "Very good",
      6 ~ "Excellent"
    ),
    # Convert date fields to dates
    Last_inspection_Date = as.Date(Last_inspection_Date, format("%d/%m/%Y")),
    months_since_inspection = interval(Last_inspection_Date, Sys.Date()) %/% months(1),
    days_since_inspection = ifelse(
      months_since_inspection < 1,
      lubridate::time_length(difftime(Sys.Date(), Last_inspection_Date), "days"),
      NA
    ),
    years_since_inspection = lubridate::time_length(difftime(Sys.Date(), Last_inspection_Date), "years"),
    staff_per_place = ifelse(
      Registered_Places == 0 |
        NumberStaff == 0,
      NA,
      NumberStaff / Registered_Places
    )
  ) |> 
  # Just 5 services of varying grades to make loading times quicker for now
  group_by(MinGrade_numeric, CareService, Subtype) |> 
  slice(1:2)

# Specify order of grades in minimum grade as factor
datastore$MinGrade <- factor(
datastore$MinGrade,
  levels =  c(
    "Unsatisfactory",
    "Weak",
    "Adequate",
    "Good",
    "Very good",
    "Excellent",
    "No grade yet"
  )
)
```


```{r, sendtoojs}
#| echo: false
#| include: false
ojs_define(datastore = datastore)
```

```{ojs}
//| echo: false
//| output: false

// Load tidyverse-equivalent OJS library for later reshaping
import { aq, op } from '@uwdata/arquero'

// Transpose data to make it useable in ojs inputs
datastore_transposed = transpose(datastore)
```


```{ojs}
// Create search box of service names
viewof search = Inputs.search(datastore_transposed, {placeholder: "Type to find a service",
width: 150,
height: 10})

// Create drop down menu of service names
viewof items = Inputs.table(search, {
columns: ["service"],
header: {service: "Select:"},
width: 300,
height: 250,
required: true,
value: search, 
multiple: false})
```


```{ojs}
//| echo: false
//| output: false

// Create function to output selected service name and return select service if none selected
function return_name() {
  var name = "Select a service"
  if(items === null) {
    return name
  } else {
    return items.service
  }
}

// Try to create a general purpose handler for nulls as waiting for input
function null_handler(item) {
  var name = "Select a service";
  if (item === null || item === undefined) {
    return name; // Return default value if item is null or undefined
  } else {
    return item; // Return item if it's not null
  }
}

service_selected_name = return_name()

// Create function to output row of selected service
function filtered_df() {
  var name = "Select a service"
  if(items === null) {
    return name
  } else {
    return items
  }
}

service_selected = filtered_df()
```

### Row {height="50%"}

::: {.callout-note appearance="minimal"}
## Disclaimer
This dashboard is not affiliated with or supported by the Care Inspectorate. It contains public sector information licensed under the Open Government Licence v3.0. 

[Data source](https://www.careinspectorate.com/index.php/publications-statistics/93-public/datastore)
:::

# Overview

```{ojs}
//| echo: false
//| output: false

// Use arquero to create dynamic values included in value boxes
mytable = aq.table(datastore)

// Create filtered table for same service type for comparison calculations
selected_service_compare = mytable
  .params({
  // define parameters
    selected_CareService: service_selected.CareService,
    selected_Subtype: service_selected.Subtype
  })
  // filter to only include services of the same type
  .filter((d, $) => op.includes($.selected_CareService, d.CareService) &&
  op.includes($.selected_Subtype, d.Subtype))
```

### Row 

::: {.valuebox icon="card-list" color="white"}
Type

<div class="value-box-value">

```{ojs}
//| echo: false
//| output: false

// SELECTED SERVICE TYPE
selected_serv_type  = {
  if (service_selected.CareService) {
    return (service_selected.CareService + " - " + service_selected.Subtype);
  } else {
    return "Select a service";
  }
}
```

`{ojs}  selected_serv_type`

</div>

```{ojs}
//| echo: false
//| output: false

// NUMBERS OF SERVICES OF SAME TYPE
number_services_same_type = selected_service_compare
  .rollup({
      count: op.count()
  })
   .objects()[0].count
   
// NUMBERS OF SERVICES WITH NO GRADE
number_services_same_type_no_grade = selected_service_compare
 .filter(d => op.includes("No grade yet", d.MinGrade))
  .rollup({
      count: op.count()
  })
   .objects()[0].count
   
// TEXT STRING SUBTITLE
selected_serv_type_subtitle  = {
  if (service_selected.CareService) {
    return ( "There are " + number_services_same_type + " of these services, " + number_services_same_type_no_grade + " have not yet received grades" );
  } else {
    return "";
  }
}
```

`{ojs} selected_serv_type_subtitle`

:::

::: {.valuebox icon="emoji-neutral-fill" color="white"}
Grade

<div class="value-box-value">

```{ojs}
//| echo: false
//| output: false

// SELECTED SERVICE TYPE
selected_serv_grade  = {
  if (service_selected.CareService) {
    return (service_selected.MinGrade);
  } else {
    return "Select a service";
  }
}
```

`{ojs} selected_serv_grade`

</div>

```{ojs}
//| echo: false
//| output: false

// PERCENTAGE OF SERVICES WITH SAME GRADE
number_services_same_grade = selected_service_compare
.params({
  // define parameters
    selected_MinGrade: service_selected.MinGrade
  })
  // first filter out those that don't have any grades
  .filter(d  => d.MinGrade_numeric >= 1)
  // group by each grade
  .groupby("MinGrade")
  // calculate counts of services with each mingrade
  .rollup({
      count: op.count()
  })
  // create new column for proportion of services with each grade
  .derive({ percent: d => op.round((d.count / op.sum(d.count) || 0)*100) }) // include `|| 0` in case sum is zero
  // filter out match selected grade
  .filter((d, $) => op.includes($.selected_MinGrade, d.MinGrade))
  // pull out percent value
   .objects()[0].percent
  
   
// PERCENTAGE OF SERVICES WITH HIGHER GRADE
number_services_higher_grade = selected_service_compare
.params({
  // define parameters
     selected_MinGrade_numeric: service_selected.MinGrade_numeric
  })
  // first filter out those that don't have any grades
  .filter(d  => d.MinGrade_numeric >= 1)
  // group by each grade
  .groupby("MinGrade_numeric")
  // calculate counts of services with each mingrade
  .rollup({
      count: op.count()
  })
  // create new column for proportion of services with each grade
  .derive({ percent: d => op.round((d.count / op.sum(d.count) || 0)*100) }) // include `|| 0` in case sum is zero
  // Ungroup by minimum grade
  .ungroup()
  // filter out match selected grade
  .filter((d, $) => d.MinGrade_numeric > $.selected_MinGrade_numeric)
  .derive({total: d => op.sum(d.percent)})
  // pull out total value
  .object(1).total
   
// TEXT STRING SUBTITLE
selected_serv_grade_subtitle  = {
  if (service_selected.CareService) {
    return ( "Same as " + number_services_same_grade + "% of services of the same type, whilst " + number_services_higher_grade + "% have a higher minimum grade" );
  } else {
    return "";
  }
}
```

`{ojs} selected_serv_grade_subtitle`

:::

::: {.valuebox icon="calendar-event-fill" color="white"}
Inspected

```{ojs}
//| echo: false
//| output: false

// SELECTED SERVICE LAST INSPECTION
selected_serv_last_inspection  = {
  if (service_selected.CareService) {
    return (service_selected.months_since_inspection + " month(s) since last inspection")
  } else {
    return "Select a service";
  }
}
```

<div class="value-box-value">

`{ojs} selected_serv_last_inspection`

</div>

```{ojs}
//| echo: false
//| output: false

// MEDIAN TIME SINCE LAST INSPECTION
median_time_last_inspection = selected_service_compare 
  // filter out those that haven't yet been inspected
 .filter(d => d.months_since_inspection >= 0)
  .rollup({
    count: op.count(),
    median_months_since_inspection: op.median('months_since_inspection')
   })
   .objects()[0].median_months_since_inspection
   
// TEXT STRING SUBTITLE
selected_serv_last_inspection_subtitle  = {
  if (service_selected.CareService) {
    return ( "The average (median) time since the last inspection for services of this type is " + median_time_last_inspection + " month(s)" );
  } else{
    return "";
  }
}
```

`{ojs} selected_serv_last_inspection_subtitle`

:::


### Row 

```{ojs}
//| echo: false
//| output: false

// MEDIAN STAFF PER REG PLACE
median_staff = selected_service_compare 
 .filter(d => d.staff_per_place > 0)
  .rollup({
    count: op.count(),
    median_staff_per_place: op.median('staff_per_place')
   })
  .objects()[0].median_staff_per_place
```

::: {.valuebox icon="people-fill" color="white"}
Staff

<div class="value-box-value">

`{ojs} service_selected.staff_per_place` per registered place

</div>

The average (median) number of staff per place for services of this type is `{ojs} median_staff`
:::

::: {.valuebox icon="chat-right-dots-fill" color="white"}
Complaints

`{ojs} service_selected.Complaints_upheld_2425`

x% of services of this type had at least one upheld complaint

:::


::: {.valuebox icon="clipboard2-check-fill" color="white"}
Requirements

`{ojs} service_selected.any_requirements_2425`

x% of services of this type that had been inspected had at least one requirement

:::


# Grades

`{ojs} number_services_same_type`


